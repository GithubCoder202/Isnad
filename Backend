// isnadhub-backend/server.js
import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import cors from 'cors';

import articleRoutes from './routes/articles.js';
import authRoutes from './routes/auth.js';
import bookmarkRoutes from './routes/bookmarks.js';
import verifyRoutes from './routes/verify.js';

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

app.use('/api/articles', articleRoutes);
app.use('/api/auth', authRoutes);
app.use('/api/bookmarks', bookmarkRoutes);
app.use('/api/verify', verifyRoutes);

const PORT = process.env.PORT || 5000;

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
})
.catch(err => console.error(err));


// models/User.js
import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  googleId: String,
  bookmarks: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Article' }],
  joinedAt: { type: Date, default: Date.now }
});

export default mongoose.model('User', UserSchema);


// models/Article.js
import mongoose from 'mongoose';

const ArticleSchema = new mongoose.Schema({
  type: { type: String, enum: ['news', 'history'], required: true },
  category: String,
  title: String,
  description: String,
  imageUrl: String,
  content: String,
  verified: Boolean,
  biasLevel: { type: String, enum: ['low', 'medium', 'high'] },
  sources: [String],
  createdAt: { type: Date, default: Date.now }
});

export default mongoose.model('Article', ArticleSchema);


// routes/auth.js
import express from 'express';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';

const router = express.Router();

router.post('/google', async (req, res) => {
  const { name, email, googleId } = req.body;
  try {
    let user = await User.findOne({ email });
    if (!user) {
      user = new User({ name, email, googleId });
      await user.save();
    }
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '7d' });
    res.json({ user, token });
  } catch (err) {
    res.status(500).json({ error: 'Authentication failed' });
  }
});

export default router;


// routes/articles.js
import express from 'express';
import Article from '../models/Article.js';

const router = express.Router();

router.get('/', async (req, res) => {
  const { type } = req.query;
  const query = type ? { type } : {};
  const articles = await Article.find(query).sort({ createdAt: -1 });
  res.json(articles);
});

router.get('/:id', async (req, res) => {
  const article = await Article.findById(req.params.id);
  if (!article) return res.status(404).json({ error: 'Not found' });
  res.json(article);
});

router.post('/', async (req, res) => {
  try {
    const article = new Article(req.body);
    await article.save();
    res.status(201).json(article);
  } catch (err) {
    res.status(400).json({ error: 'Invalid article data' });
  }
});

export default router;


// routes/bookmarks.js
import express from 'express';
import User from '../models/User.js';

const router = express.Router();

router.post('/', async (req, res) => {
  const { userId, articleId } = req.body;
  const user = await User.findById(userId);
  if (!user) return res.status(404).json({ error: 'User not found' });
  if (!user.bookmarks.includes(articleId)) user.bookmarks.push(articleId);
  await user.save();
  res.json({ success: true });
});

router.get('/:userId', async (req, res) => {
  const user = await User.findById(req.params.userId).populate('bookmarks');
  if (!user) return res.status(404).json({ error: 'User not found' });
  res.json(user.bookmarks);
});

router.delete('/:userId/:articleId', async (req, res) => {
  const { userId, articleId } = req.params;
  const user = await User.findById(userId);
  if (!user) return res.status(404).json({ error: 'User not found' });
  user.bookmarks = user.bookmarks.filter(id => id.toString() !== articleId);
  await user.save();
  res.json({ success: true });
});

export default router;


// routes/verify.js
import express from 'express';
const router = express.Router();

// Simulated AI check
router.post('/', (req, res) => {
  const { url } = req.body;
  if (!url) return res.status(400).json({ error: 'No URL provided' });

  res.json({
    islamicAccuracy: '87%',
    summary: 'This article aligns with Islamic teachings on the environment.',
    historicalParallels: [
      'Water management in Al-Andalus',
      'Hima zones by Umar ibn al-Khattab',
      'Al-Jahiz on animals and ecology'
    ]
  });
});

export default router;


// .env example (create this file at root)
// MONGO_URI=mongodb://localhost:27017/isnadhub
// JWT_SECRET=your_jwt_secret
